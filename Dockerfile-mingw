FROM ubuntu:noble

ARG zlib_version
ARG zlib_hash

ARG libevent_version
ARG libevent_hash

ARG openssl_version
ARG openssl_hash

ARG tor_version
ARG tor_hash

ARG jobs

COPY gpg-keys/* /
COPY patch /patch

RUN \
  DEBIAN_FRONTEND=noninteractive \
  apt-get update -qq && apt-get install --no-install-recommends -qq \
  build-essential \
  curl \
  ca-certificates \
  file \
  gnupg \
  mingw-w64 \
  python-is-python3 \
  ; # end of apt-get install

ENV PATH="/usr/i686-w64-mingw32/bin:$PATH"

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Download and verify all tarballs

RUN \
  curl --proto '=https' --tlsv1.3 -fsSL "https://zlib.net/zlib-${zlib_version}.tar.gz" -o "zlib-$zlib_version.tar.gz" && \
  curl --proto '=https' --tlsv1.3 -fsSL "https://zlib.net/zlib-${zlib_version}.tar.gz.asc" -o "zlib-$zlib_version.tar.gz.asc" && \
  gpg --keyring /zlib.gpg --verify "zlib-$zlib_version.tar.gz.asc" "zlib-$zlib_version.tar.gz" && \
  echo "$zlib_hash  zlib-$zlib_version.tar.gz" | shasum -a 256 -c - && \
  tar -zxvf "zlib-$zlib_version.tar.gz"

RUN \
  curl --proto '=https' --tlsv1.3 -fsSL "https://github.com/openssl/openssl/releases/download/openssl-$openssl_version/openssl-$openssl_version.tar.gz" -o "openssl-$openssl_version.tar.gz" && \
  curl --proto '=https' --tlsv1.3 -fsSL "https://github.com/openssl/openssl/releases/download/openssl-$openssl_version/openssl-$openssl_version.tar.gz.asc" -o "openssl-$openssl_version.tar.gz.asc" && \
  gpg --keyring /openssl.gpg --verify "openssl-$openssl_version.tar.gz.asc" "openssl-$openssl_version.tar.gz" && \
  echo "$openssl_hash  openssl-$openssl_version.tar.gz" | shasum -a 256 -c - && \
  tar -xvzf "openssl-$openssl_version.tar.gz"

RUN \
  curl --proto '=https' --tlsv1.3 -fsSL "https://github.com/libevent/libevent/releases/download/release-$libevent_version/libevent-$libevent_version.tar.gz" -o "libevent-$libevent_version.tar.gz" && \
  curl --proto '=https' --tlsv1.3 -fsSL "https://github.com/libevent/libevent/releases/download/release-$libevent_version/libevent-$libevent_version.tar.gz.asc" -o "libevent-$libevent_version.tar.gz.asc" && \
  gpg --keyring /libevent.gpg --verify "libevent-$libevent_version.tar.gz.asc" "libevent-$libevent_version.tar.gz" && \
  echo "$libevent_hash  libevent-$libevent_version.tar.gz" | shasum -a 256 -c - && \
  tar -zxvf "libevent-$libevent_version.tar.gz"

RUN \
  curl --proto '=https' --tlsv1.3 -fsSL "https://dist.torproject.org/tor-$tor_version.tar.gz" -o "tor-$tor_version.tar.gz" && \
  curl --proto '=https' --tlsv1.3 -fsSL "https://dist.torproject.org/tor-$tor_version.tar.gz.sha256sum.asc" -o "tor-$tor_version.tar.gz.sha256sum.asc" && \
  echo "$tor_hash  tor-$tor_version.tar.gz" > "tor-$tor_version.tar.gz.sha256sum" && \
  gpg --keyring /tor.gpg --verify "tor-$tor_version.tar.gz.sha256sum.asc" "tor-$tor_version.tar.gz.sha256sum" && \
  sha256sum -c "tor-$tor_version.tar.gz.sha256sum" && \
  tar -xvzf "tor-$tor_version.tar.gz"

# Configure and compile everything

RUN \
  cd "zlib-$zlib_version" && \
  make ${jobs:+-j${jobs}} -f win32/Makefile.gcc PREFIX=i686-w64-mingw32- && \
  make ${jobs:+-j${jobs}} -f win32/Makefile.gcc PREFIX=i686-w64-mingw32- \
    BINARY_PATH="$PWD/install/bin" \
    INCLUDE_PATH="$PWD/install/include" \
    LIBRARY_PATH="$PWD/install/lib" \
    install

RUN \
  cd "openssl-$openssl_version" && \
  ./Configure --prefix="$PWD/root" \
    --cross-compile-prefix=i686-w64-mingw32- \
    mingw \
    no-dso \
    no-shared \
    no-ssl-trace \
    no-ui-console && \
  make ${jobs:+-j${jobs}} && \
  make install_sw

RUN \
  cd "libevent-$libevent_version" && \
  ./configure \
              --host=i686-w64-mingw32 \
              --disable-openssl \
              --prefix="$PWD/install" \
              --disable-shared \
              --enable-static \
              --with-pic && \
  make ${jobs:+-j${jobs}} && \
  make install

RUN \
  cd "tor-$tor_version" && \
  ./configure --prefix="$PWD/install" \
              --host=i686-w64-mingw32 \
              --enable-static-tor \
              --with-libevent-dir="$PWD/../libevent-$libevent_version/install" \
              --with-openssl-dir="$PWD/../openssl-$openssl_version/root" \
              --with-zlib-dir="$PWD/../zlib-$zlib_version/install" \
              --disable-asciidoc \
              --disable-html-manual \
              --disable-lzma \
              --disable-manpage \
              --disable-zstd \
              --disable-module-relay \
              --disable-module-dirauth \
              LIBS=-lcrypt32 && \
  make ${jobs:+-j${jobs}} && \
  make install

ENTRYPOINT ["sh", "-c", "while true; do sleep 2; done"]
